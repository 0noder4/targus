services:
  postgres:
    image: postgres
    container_name: ${PROJECT_NAME}_postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      NEXT_TELEMETRY_DISABLED: 1
    volumes:
      - ./data:/var/lib/postgresql/data
    networks:
      - internal

  backend:
    image: 0noder4/targus:backend_1.0
    container_name: ${PROJECT_NAME}_backend
    build:
      context: backend
    env_file: .env
    environment:
      DATABASE_CLIENT: ${DATABASE_CLIENT}
      DATABASE_HOST: postgres
      DATABASE_PORT: ${DATABASE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      APP_KEYS: ${APP_KEYS}
      NODE_ENV: ${NODE_ENV}
      PORT: ${BACKEND_PORT}
    volumes:
      - ./backend/config:/opt/app/config
      - ./backend/src:/opt/app/src
      - ./backend/package.json:/opt/package.json
      - ./backend/public/uploads:/opt/app/public/uploads
    ports:
      - "1337:1337"
    networks:
      - internal
    depends_on:
      - postgres

  frontend:
    image: 0noder4/targus:frontend_alfa_3.0
    container_name: ${PROJECT_NAME}_frontend
    build:
      context: frontend
      target: ${NODE_ENV}
    ports:
      - 80:3000
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - internal
    environment:
      NODE_ENV: ${NODE_ENV}
      MJ_APIKEY_PUBLIC: ${MJ_APIKEY_PUBLIC}
      MJ_APIKEY_PRIVATE: ${MJ_APIKEY_PRIVATE}
      BACKEND_PROTOCOL: ${BACKEND_PROTOCOL}
      BACKEND_HOST: ${BACKEND_HOST}
      BACKEND_PORT: ${BACKEND_PORT}
    depends_on:
      - backend

volumes:
  data:

networks:
  internal:
    driver: bridge
